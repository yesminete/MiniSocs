@startuml

'Diagramme de sÃ©quence (PlantUML)'

'Configuration charte graphique'
hide footbox
skinparam sequenceParticiantBackgroundColor White
skinparam sequenceActorBackgroundColor White

'DÃ©claration des acteurs et des participants'
actor "u1:utilisateur" as u1
participant "__m:MiniSocs__" as sys
participant "__r:reseauSocial__" as r
participant "__me:Member__" as m
participant "__u:Utilisateur__" as u
actor "u2:utilisateur" as u2
'Interaction principale'

u1 -> sys++: posterMessage(pseudoUtilisateur,pseudoMembre,contenu,nomReseau)
opt contenu!=null && contenu!=vide && pseudoUtilisateur!= null && pseudoUtilisateur!=vide && pseudoMembre!=null && pseudoMembre!=vide && nomReseau != null && nomReseau!= vide
sys-> sys++: r=chercherReseauSocial(nomReseau) : ReseauSocial
return
sys->sys++:chercherUtilsateurs(pseudoUtilisateur)
return
opt u!=null && r!=null
sys->r++:m=chercherMembre(pseudoMembre)
return
sys-> u ++: etat = getEtatCompte(): EtatCompte
return
sys-> r ++: test = estOuvert(): Boolean
return
sys -> u ++: me = chercherMembre(pseudoMembre):membre
return
opt test && etat==Actif && me==m
sys->m ++: Test = getEstModerateur()
return
alt Test==True
create "__mes:Message__" as mes
sys-> mes ++: mes = create(contenu)
return
sys-> mes : setEtatMessage(VISIBLE)
sys->u2 : notifieMembreReseau
else
create "__mes:Message__" as mes2
sys->mes2 ++: mes = create(contenu)
return
sys->u2 : notifieModerateur
end
end
end
end
@enduml
