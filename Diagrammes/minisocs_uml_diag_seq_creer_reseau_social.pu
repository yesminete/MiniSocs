@startuml
'Diagramme de sÃ©quence (PlantUML)'

'Configuration charte graphique'
hide footbox
skinparam sequenceParticipantBackgroundColor White
skinparam sequenceActorBackgroundColor White

'DÃ©claration des acteurs et des participants'
actor "__:utilisateur:__" as u
participant "__:MiniSocs:__" as m
participant "__:Utilisateur:__" as ui
participant "__r:ReseauSocial:__" as r
participant "__:Membre:__" as me
participant "__:ProducteurMessageEnAttente:__" as pa
participant "__:ProducteurMessagePoste:__" as pp

u -> m++: creerReseauSocial(pseudonymeUtilisateur,pseudonymeMembre,nomReseau)
alt pseudonymeUtilisateur!=null && pseudonymeUtilisateur!=vide && pseudonymeMembre!=null && pseudonymeMembre!=vide && nomReseau!=null && nomReseau!=vide
    m -> m++: r = chercherReseauSocial(nomReseau)
    return
    alt r==null
        m -> m++: u = chercherUtilisateur(pseudonyme)
        return
        alt u!=null
            ' Modification: getEtatCompte() is now called on MiniSocs'
            m -> ui++: etat = getEtatCompte(u)
            return
            alt etat==ACTIF
                create "__:ReseauSocial:__" as R
                m -> R++: r=create(nomReseau,true)
                return
                create "__:MonConsommateur:__" as mon
                m->mon++: conso = create(ETATSTRATEGIE.IMMEDIAT)
                return
                m -> me++: me = creerMembre(pseudonymeMembre,true,r,conso)
                return
                m -> r++: ajouterMembre(me)
                return
                ui -> r++: pa = getProducteurMessageEnAttente()
                r->pa++ : subscribe(conso)
                return
                return
                ui -> r++ : pp = getProducteurMessageEnAttente()
                r -> pp++: subscribe(conso)
                return
                return
            end
        end
    end
end
return
@enduml

